import { WalletNotConnectedError } from '@solana/wallet-adapter-base';
import { defer, from, throwError } from 'rxjs';
export const signMessage = (adapter, connected, errorSubject) => {
    return (message) => {
        if (!connected) {
            const error = new WalletNotConnectedError();
            errorSubject.next(error);
            return throwError(error);
        }
        return from(defer(() => adapter.signMessage(message)));
    };
};
export const signTransaction = (adapter, connected, errorSubject) => {
    return (transaction) => {
        if (!connected) {
            const error = new WalletNotConnectedError();
            errorSubject.next(error);
            return throwError(error);
        }
        return from(defer(() => adapter.signTransaction(transaction)));
    };
};
export const signAllTransactions = (adapter, connected, errorSubject) => {
    return (transactions) => {
        if (!connected) {
            const error = new WalletNotConnectedError();
            errorSubject.next(error);
            return throwError(error);
        }
        return from(defer(() => adapter.signAllTransactions(transactions)));
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LnNpZ25lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93YWxsZXQvd2FsbGV0LnNpZ25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1ELHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFdkgsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQXVCLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVwRSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDdkIsT0FBbUMsRUFDbkMsU0FBa0IsRUFDbEIsWUFBOEIsRUFDbUIsRUFBRTtJQUNuRCxPQUFPLENBQUMsT0FBbUIsRUFBRSxFQUFFO1FBQzNCLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixNQUFNLEtBQUssR0FBRyxJQUFJLHVCQUF1QixFQUFFLENBQUM7WUFDNUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QjtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDM0IsT0FBNEIsRUFDNUIsU0FBa0IsRUFDbEIsWUFBOEIsRUFDeUIsRUFBRTtJQUN6RCxPQUFPLENBQUMsV0FBd0IsRUFBRSxFQUFFO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixNQUFNLEtBQUssR0FBRyxJQUFJLHVCQUF1QixFQUFFLENBQUM7WUFDNUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QjtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUMvQixPQUE0QixFQUM1QixTQUFrQixFQUNsQixZQUE4QixFQUM4QixFQUFFO0lBQzlELE9BQU8sQ0FBQyxZQUEyQixFQUFFLEVBQUU7UUFDbkMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE1BQU0sS0FBSyxHQUFHLElBQUksdUJBQXVCLEVBQUUsQ0FBQztZQUM1QyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzc2FnZVNpZ25lcldhbGxldEFkYXB0ZXIsIFNpZ25lcldhbGxldEFkYXB0ZXIsIFdhbGxldE5vdENvbm5lY3RlZEVycm9yIH0gZnJvbSAnQHNvbGFuYS93YWxsZXQtYWRhcHRlci1iYXNlJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJztcbmltcG9ydCB7IGRlZmVyLCBmcm9tLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjb25zdCBzaWduTWVzc2FnZSA9IChcbiAgICBhZGFwdGVyOiBNZXNzYWdlU2lnbmVyV2FsbGV0QWRhcHRlcixcbiAgICBjb25uZWN0ZWQ6IGJvb2xlYW4sXG4gICAgZXJyb3JTdWJqZWN0OiBTdWJqZWN0PHVua25vd24+XG4pOiAoKG1lc3NhZ2U6IFVpbnQ4QXJyYXkpID0+IE9ic2VydmFibGU8VWludDhBcnJheT4pID0+IHtcbiAgICByZXR1cm4gKG1lc3NhZ2U6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFdhbGxldE5vdENvbm5lY3RlZEVycm9yKCk7XG4gICAgICAgICAgICBlcnJvclN1YmplY3QubmV4dChlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnJvbShkZWZlcigoKSA9PiBhZGFwdGVyLnNpZ25NZXNzYWdlKG1lc3NhZ2UpKSk7XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaWduVHJhbnNhY3Rpb24gPSAoXG4gICAgYWRhcHRlcjogU2lnbmVyV2FsbGV0QWRhcHRlcixcbiAgICBjb25uZWN0ZWQ6IGJvb2xlYW4sXG4gICAgZXJyb3JTdWJqZWN0OiBTdWJqZWN0PHVua25vd24+XG4pOiAoKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbikgPT4gT2JzZXJ2YWJsZTxUcmFuc2FjdGlvbj4pID0+IHtcbiAgICByZXR1cm4gKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbikgPT4ge1xuICAgICAgICBpZiAoIWNvbm5lY3RlZCkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgV2FsbGV0Tm90Q29ubmVjdGVkRXJyb3IoKTtcbiAgICAgICAgICAgIGVycm9yU3ViamVjdC5uZXh0KGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmcm9tKGRlZmVyKCgpID0+IGFkYXB0ZXIuc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSkpO1xuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2lnbkFsbFRyYW5zYWN0aW9ucyA9IChcbiAgICBhZGFwdGVyOiBTaWduZXJXYWxsZXRBZGFwdGVyLFxuICAgIGNvbm5lY3RlZDogYm9vbGVhbixcbiAgICBlcnJvclN1YmplY3Q6IFN1YmplY3Q8dW5rbm93bj5cbik6ICgodHJhbnNhY3Rpb25zOiBUcmFuc2FjdGlvbltdKSA9PiBPYnNlcnZhYmxlPFRyYW5zYWN0aW9uW10+KSA9PiB7XG4gICAgcmV0dXJuICh0cmFuc2FjdGlvbnM6IFRyYW5zYWN0aW9uW10pID0+IHtcbiAgICAgICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFdhbGxldE5vdENvbm5lY3RlZEVycm9yKCk7XG4gICAgICAgICAgICBlcnJvclN1YmplY3QubmV4dChlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnJvbShkZWZlcigoKSA9PiBhZGFwdGVyLnNpZ25BbGxUcmFuc2FjdGlvbnModHJhbnNhY3Rpb25zKSkpO1xuICAgIH07XG59O1xuIl19