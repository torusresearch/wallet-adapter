{"version":3,"file":"solana-wallet-adapter-angular.js","sources":["../../src/connection/connection.tokens.ts","../../src/connection/connection.store.ts","../../src/wallet/wallet.errors.ts","../../src/wallet/wallet.tokens.ts","../../src/operators/from-adapter-event.ts","../../src/operators/not-null.ts","../../src/wallet/local-storage.ts","../../src/wallet/wallet.signer.ts","../../src/wallet/wallet.store.ts","../../src/solana-wallet-adapter-angular.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { ConnectionConfig } from '@solana/web3.js';\n\nexport const CONNECTION_CONFIG = new InjectionToken<ConnectionConfig>('connectionConfig');\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { Connection, ConnectionConfig } from '@solana/web3.js';\nimport { map } from 'rxjs/operators';\n\nimport { CONNECTION_CONFIG } from './connection.tokens';\nimport { ConnectionState } from './connection.types';\n\nexport const CONNECTION_DEFAULT_CONFIG: ConnectionConfig = { commitment: 'confirmed' };\n\n@Injectable()\nexport class ConnectionStore extends ComponentStore<ConnectionState> {\n    connection$ = this.state$.pipe(map((state) => state.connection));\n\n    constructor(\n        @Optional()\n        @Inject(CONNECTION_CONFIG)\n        private _config: ConnectionConfig\n    ) {\n        super();\n\n        this._config = {\n            ...CONNECTION_DEFAULT_CONFIG,\n            ...this._config,\n        };\n\n        this.setState({ connection: null });\n    }\n\n    readonly setEndpoint = this.updater((state, endpoint: string) => ({\n        ...state,\n        connection: new Connection(endpoint, this._config),\n    }));\n}\n","import { WalletError } from '@solana/wallet-adapter-base';\n\nexport class WalletNotSelectedError extends WalletError {\n    name = 'WalletNotSelectedError';\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { WalletConfig } from './wallet.types';\n\nexport const WALLET_CONFIG = new InjectionToken<WalletConfig>('walletConfig');\n","import { WalletAdapter, WalletAdapterEvents } from '@solana/wallet-adapter-base';\nimport { fromEventPattern, Observable } from 'rxjs';\n\nexport const fromAdapterEvent = <T>(adapter: WalletAdapter, eventName: keyof WalletAdapterEvents): Observable<T> =>\n    fromEventPattern(\n        (addHandler) => adapter.on(eventName, addHandler),\n        (removeHandler) => adapter.off(eventName, removeHandler)\n    );\n","import { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport const isNotNull = <T>(source: Observable<T | null>): Observable<T> =>\n    source.pipe(filter((item: T | null): item is T => item !== null));\n","export class LocalStorageService<T> {\n    private _value = this._defaultValue;\n\n    constructor(private _key: string, private _defaultValue: T) {}\n\n    get value(): T {\n        if (this._value) return this._value;\n\n        try {\n            const value = localStorage.getItem(this._key);\n            if (value) {\n                this._value = JSON.parse(value) as T;\n                return this._value;\n            }\n        } catch (error) {\n            console.error(error);\n        }\n\n        return this._defaultValue;\n    }\n\n    setItem(newValue: T): void {\n        if (newValue === this.value) return;\n\n        this._value = newValue;\n\n        try {\n            if (newValue === null) {\n                localStorage.removeItem(this._key);\n            } else {\n                localStorage.setItem(this._key, JSON.stringify(newValue));\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n}\n","import { MessageSignerWalletAdapter, SignerWalletAdapter, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { Transaction } from '@solana/web3.js';\nimport { defer, from, Observable, Subject, throwError } from 'rxjs';\n\nexport const signMessage = (\n    adapter: MessageSignerWalletAdapter,\n    connected: boolean,\n    errorSubject: Subject<unknown>\n): ((message: Uint8Array) => Observable<Uint8Array>) => {\n    return (message: Uint8Array) => {\n        if (!connected) {\n            const error = new WalletNotConnectedError();\n            errorSubject.next(error);\n            return throwError(error);\n        }\n\n        return from(defer(() => adapter.signMessage(message)));\n    };\n};\n\nexport const signTransaction = (\n    adapter: SignerWalletAdapter,\n    connected: boolean,\n    errorSubject: Subject<unknown>\n): ((transaction: Transaction) => Observable<Transaction>) => {\n    return (transaction: Transaction) => {\n        if (!connected) {\n            const error = new WalletNotConnectedError();\n            errorSubject.next(error);\n            return throwError(error);\n        }\n\n        return from(defer(() => adapter.signTransaction(transaction)));\n    };\n};\n\nexport const signAllTransactions = (\n    adapter: SignerWalletAdapter,\n    connected: boolean,\n    errorSubject: Subject<unknown>\n): ((transactions: Transaction[]) => Observable<Transaction[]>) => {\n    return (transactions: Transaction[]) => {\n        if (!connected) {\n            const error = new WalletNotConnectedError();\n            errorSubject.next(error);\n            return throwError(error);\n        }\n\n        return from(defer(() => adapter.signAllTransactions(transactions)));\n    };\n};\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport {\n    Adapter,\n    SendTransactionOptions,\n    Wallet,\n    WalletName,\n    WalletNotConnectedError,\n    WalletNotReadyError,\n} from '@solana/wallet-adapter-base';\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js';\nimport { combineLatest, defer, EMPTY, from, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, concatMap, filter, finalize, first, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\n\nimport { fromAdapterEvent, isNotNull } from '../operators';\nimport { LocalStorageService } from './local-storage';\nimport { WalletNotSelectedError } from './wallet.errors';\nimport { signAllTransactions, signMessage, signTransaction } from './wallet.signer';\nimport { WALLET_CONFIG } from './wallet.tokens';\nimport { WalletConfig, WalletState } from './wallet.types';\n\nexport const WALLET_DEFAULT_CONFIG: WalletConfig = {\n    wallets: [],\n    autoConnect: false,\n    localStorageKey: 'walletName',\n};\n\nconst initialState: {\n    wallet: Wallet | null;\n    adapter: Adapter | null;\n    ready: boolean;\n    connected: boolean;\n    publicKey: PublicKey | null;\n} = {\n    wallet: null,\n    adapter: null,\n    ready: false,\n    connected: false,\n    publicKey: null,\n};\n\n@Injectable()\nexport class WalletStore extends ComponentStore<WalletState> {\n    private readonly _error = new Subject();\n    private readonly _localStorage = new LocalStorageService<WalletName | null>(\n        this._config?.localStorageKey || 'walletName',\n        null\n    );\n    readonly wallets$ = this.select((state) => state.wallets);\n    readonly autoConnect$ = this.select((state) => state.autoConnect);\n    readonly wallet$ = this.select((state) => state.wallet);\n    readonly adapter$ = this.select((state) => state.adapter);\n    readonly publicKey$ = this.select((state) => state.publicKey);\n    readonly ready$ = this.select((state) => state.ready);\n    readonly connecting$ = this.select((state) => state.connecting);\n    readonly disconnecting$ = this.select((state) => state.disconnecting);\n    readonly connected$ = this.select((state) => state.connected);\n    readonly name$ = this.select((state) => state.name);\n    readonly error$ = this._error.asObservable();\n    readonly anchorWallet$ = this.select(\n        this.publicKey$,\n        this.adapter$,\n        this.connected$,\n        (publicKey, adapter, connected) => {\n            const adapterSignTransaction =\n                adapter && 'signTransaction' in adapter ? signTransaction(adapter, connected, this._error) : undefined;\n            const adapterSignAllTransactions =\n                adapter && 'signAllTransactions' in adapter\n                    ? signAllTransactions(adapter, connected, this._error)\n                    : undefined;\n\n            return publicKey && adapterSignTransaction && adapterSignAllTransactions\n                ? {\n                      publicKey,\n                      signTransaction: (transaction: Transaction) => adapterSignTransaction(transaction).toPromise(),\n                      signAllTransactions: (transactions: Transaction[]) =>\n                          adapterSignAllTransactions(transactions).toPromise(),\n                  }\n                : undefined;\n        },\n        { debounce: true }\n    );\n\n    // Map of wallet names to wallets\n    private readonly _walletsByName$ = this.select(this.wallets$, (wallets) =>\n        wallets.reduce<Record<WalletName, Wallet>>((walletsByName, wallet) => {\n            walletsByName[wallet.name] = wallet;\n            return walletsByName;\n        }, {})\n    );\n\n    constructor(\n        @Optional()\n        @Inject(WALLET_CONFIG)\n        private _config: WalletConfig\n    ) {\n        super();\n\n        this._config = {\n            ...WALLET_DEFAULT_CONFIG,\n            ...this._config,\n        };\n\n        this.setState({\n            ...initialState,\n            wallets: this._config?.wallets || [],\n            name: this._localStorage.value,\n            connecting: false,\n            disconnecting: false,\n            autoConnect: this._config?.autoConnect || false,\n        });\n    }\n\n    // When the selected wallet changes, initialize the state\n    readonly onWalletChanged = this.effect(() =>\n        combineLatest([this.name$, this._walletsByName$]).pipe(\n            tap(([name, walletsByName]) => {\n                const wallet = (name && walletsByName[name]) || null;\n                const adapter = wallet && wallet.adapter;\n\n                if (adapter) {\n                    const { publicKey, connected } = adapter;\n                    this.patchState({\n                        name,\n                        adapter,\n                        wallet,\n                        publicKey,\n                        connected,\n                        ready: false,\n                    });\n\n                    // FIXME: Asynchronously update the ready state\n                } else {\n                    this.patchState(initialState);\n                }\n            })\n        )\n    );\n\n    // If autoConnect is enabled, try to connect when the adapter changes and is ready\n    readonly autoConnect = this.effect(() => {\n        return combineLatest([\n            this.autoConnect$,\n            this.adapter$.pipe(isNotNull),\n            this.ready$,\n            this.connecting$,\n            this.connected$,\n        ]).pipe(\n            filter(\n                ([autoConnect, , ready, connecting, connected]) => autoConnect && ready && !connecting && !connected\n            ),\n            concatMap(([, adapter]) => {\n                this.patchState({ connecting: true });\n                return from(defer(() => adapter.connect())).pipe(\n                    catchError(() => {\n                        // Clear the selected wallet\n                        this.patchState({ name: null });\n                        // Don't throw error, but onError will still be called\n                        return of(null);\n                    }),\n                    finalize(() => this.patchState({ connecting: false }))\n                );\n            })\n        );\n    });\n\n    // Select a wallet by name\n    readonly selectWallet = this.effect((newName$: Observable<WalletName | null>) => {\n        return newName$.pipe(\n            concatMap((action) => of(action).pipe(withLatestFrom(this.name$, this.adapter$))),\n            filter(([newName, name]) => newName !== name),\n            concatMap(([newName, , adapter]) => {\n                if (!adapter) {\n                    return of(newName);\n                } else {\n                    return from(defer(() => adapter.disconnect())).pipe(map(() => newName));\n                }\n            }),\n            tap((newName) => {\n                this._localStorage.setItem(newName);\n                this.patchState({ name: newName });\n            })\n        );\n    });\n\n    // Handle the adapter's connect event\n    readonly onConnect = this.effect(() => {\n        return this.adapter$.pipe(\n            isNotNull,\n            switchMap((adapter) =>\n                fromAdapterEvent(adapter, 'connect').pipe(\n                    tap(() => {\n                        const { connected, publicKey } = adapter;\n\n                        this.patchState({\n                            connected,\n                            publicKey,\n                        });\n                    })\n                )\n            )\n        );\n    });\n\n    // Handle the adapter's disconnect event\n    readonly onDisconnect = this.effect(() => {\n        return this.adapter$.pipe(\n            isNotNull,\n            switchMap((adapter) =>\n                fromAdapterEvent(adapter, 'disconnect').pipe(tap(() => this.patchState({ name: null })))\n            )\n        );\n    });\n\n    // Handle the adapter's error event\n    readonly onError = this.effect(() => {\n        return this.adapter$.pipe(\n            isNotNull,\n            switchMap((adapter) => fromAdapterEvent(adapter, 'error').pipe(tap((error) => this._error.next(error))))\n        );\n    });\n\n    // Connect the adapter to the wallet\n    connect(): Observable<void> {\n        return combineLatest([\n            this.connecting$,\n            this.disconnecting$,\n            this.connected$,\n            this.wallet$,\n            this.adapter$,\n            this.ready$,\n        ]).pipe(\n            first(),\n            filter(([connecting, disconnecting, connected]) => !connected && !connecting && !disconnecting),\n            concatMap(([, , , wallet, adapter, ready]) => {\n                if (!wallet || !adapter) {\n                    const error = new WalletNotSelectedError();\n                    this._error.next(error);\n                    return throwError(error);\n                }\n\n                if (!ready) {\n                    this.patchState({ name: null });\n\n                    if (typeof window !== 'undefined') {\n                        window.open(wallet.url, '_blank');\n                    }\n\n                    const error = new WalletNotReadyError();\n                    this._error.next(error);\n                    return throwError(error);\n                }\n\n                this.patchState({ connecting: true });\n\n                return from(defer(() => adapter.connect())).pipe(\n                    catchError((error) => {\n                        this.patchState({ name: null });\n                        return throwError(error);\n                    }),\n                    finalize(() => this.patchState({ connecting: false }))\n                );\n            })\n        );\n    }\n\n    // Disconnect the adapter from the wallet\n    disconnect(): Observable<void> {\n        return combineLatest([this.disconnecting$, this.adapter$]).pipe(\n            first(),\n            filter(([disconnecting]) => !disconnecting),\n            concatMap(([, adapter]) => {\n                if (!adapter) {\n                    this.patchState({ name: null });\n                    return EMPTY;\n                } else {\n                    this.patchState({ disconnecting: true });\n                    return from(defer(() => adapter.disconnect())).pipe(\n                        finalize(() => this.patchState({ disconnecting: false, name: null }))\n                    );\n                }\n            })\n        );\n    }\n\n    // Send a transaction using the provided connection\n    sendTransaction(\n        transaction: Transaction,\n        connection: Connection,\n        options?: SendTransactionOptions\n    ): Observable<string> {\n        return combineLatest([this.adapter$, this.connected$]).pipe(\n            first(),\n            concatMap(([adapter, connected]) => {\n                if (!adapter) {\n                    const error = new WalletNotSelectedError();\n                    this._error.next(error);\n                    return throwError(error);\n                }\n\n                if (!connected) {\n                    const error = new WalletNotConnectedError();\n                    this._error.next(error);\n                    return throwError(error);\n                }\n\n                return from(defer(() => adapter.sendTransaction(transaction, connection, options)));\n            })\n        );\n    }\n\n    // Sign a transaction if the wallet supports it\n    signTransaction(transaction: Transaction): Observable<Transaction> | undefined {\n        const { adapter, connected } = this.get();\n\n        return adapter && 'signTransaction' in adapter\n            ? signTransaction(adapter, connected, this._error)(transaction)\n            : undefined;\n    }\n\n    // Sign multiple transactions if the wallet supports it\n    signAllTransactions(transactions: Transaction[]): Observable<Transaction[]> | undefined {\n        const { adapter, connected } = this.get();\n\n        return adapter && 'signAllTransactions' in adapter\n            ? signAllTransactions(adapter, connected, this._error)(transactions)\n            : undefined;\n    }\n\n    // Sign an arbitrary message if the wallet supports it\n    signMessage(message: Uint8Array): Observable<Uint8Array> | undefined {\n        const { adapter, connected } = this.get();\n\n        return adapter && 'signMessage' in adapter ? signMessage(adapter, connected, this._error)(message) : undefined;\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}